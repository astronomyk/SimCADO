Using PSFs with SimCADO
=======================

Point spread function (PSF) kernels are used by SimCADO to mimic the spread in
the beam that is due to the specific optical configuration of any given system.

A PSF kernel is in essence a two dimensional array which describes how the
light from a point source is spread out over the detector plane. SimCADO can
accept 2D numpy arrays as input, however, more often than not the user will
want to use a set of pre-calculated PSFs.

Default PSFs for MICADO
-----------------------

By default the MICADO instrument package includes PSF kernels (arrays) in FITS
format for the MCAO and SCAO observing modes. These default kernel FITS files
are found in the MICADO data folder under the names: ``PSF_MCAO.fits``,
``PSF_SCAO.fits``.

SimCADO can be told to use either one of these PSFs by passing the
``SCOPE_PSF_FILE`` keyword to either the ``simcado.run`` function, or to a
``UserCommands`` dictionary::

    hdu = simcado.run(... , SCOPE_PSF_FILE="PSF_MCAO.fits")

or::

    cmds = simcado.UserCommands()
    cmds["SCOPE_PSF_FILE"] = "PSF_MCAO.fits"

.. note:: The default PSFs field-constant.
    This means that they do not vary over the field of view. For the MCAO option
    this is the optimal case - a constant AO correction everywhere in the field
    - however for the SCAO case, this is only valid for the central ~2x2 arcsec.

    Hence if we are interested in simulating the full MICADO field of view it
    will be unrealistic to use the ``PSF_SCAO.fits`` file. More on this below.

    Both the MCAO and SCAO files were generated for reasonably good conditions
    and should be understood as offering an optimistic view of how MICADO will
    perform.


Field varying PSF
-----------------

As stated above the default PSFs contained in the MICADO package are for the
case where the PSF doesn't vary over the field. For the SCAO observation modes
this is an unrealistic assumption unless one is only interested in the central
~2x2 arcsec or so. SimCADO (v0.6 and above) is also able to accept a so-called
FV-PSF file (field-varying PSF file) in order to simulate the variation of the
PSF over the field.

FV-PSF files are quite large (several 100 MB to GB) as they contain PSF kernels for
many different positions over the field (and generally for many different
wavelengths).

An example of a FV-PSF can be found here:

`AnisoCADO_SCAO_FVPSF_4mas_1024_20190321.fits
<https://www.univie.ac.at/simcado/InstPkgSvr/psfs/AnisoCADO_SCAO_FVPSF_4mas_1024_20190321.fits>`_

.. warning:: This file is 2GB in size.

This FV-PSF was generated by Eric Gendron's
`AnisoCADO <https://anisocado.readthedocs.io/>`_ - a python package for
generating SCAO PSFs for the ELT+MICADO for any wavelength and off-axis guide
star position.

To use this PSF file after downloading it, we simply pass the filename as with
the other PSF, and SimCADO does the rest::

    fvpsf_path = "path/to/AnisoCADO_SCAO_FVPSF_4mas_1024_20190321.fits"
    simcado.run(... , SCOPE_PSF_FILE=fvpsf_path)

.. warning:: SimCADO will probably run slower when using a FV-PSF file.
    This is because SimCADO convolves the FOV of each detector with each PSF
    kernel that is present inside the borders of that FOV. This means if there
    are 9 different PSFs to be used in the region covered by the central
    detector chip, then this region will be convolved 9 times with different
    PSFs (and masked accordingly 9 times). Hence simulating the central chip
    will take 9 times as long as when using a field-constant PSF.


Custom FV-PSF can be generated by using
`AnisoCADO <https://anisocado.readthedocs.io/>`_. See AnisoCADO's documentation
for how to generate SimCADO-readable FV-PSF FITS files.



